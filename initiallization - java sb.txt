//PREVIOUS ---
/*
https://youtu.be/kt3wUPIDkx4?si=p0ZLOYnaX88IAtgr
extensions --


install --
https://youtu.be/R6MoDMASwag?si=wxeuzb5bHU-kcGMd

program --
https://youtu.be/5LlfwQ4xzXc?si=HL8uoiv6ncSPRogd


// maven --
https://youtu.be/YTvlb6eny_0?si=lxUZ4DXhR0woQLVn


// java spring boot see from there tutorial -- and use intellij to save brain cells
https://youtu.be/gJrjgg1KVL4?si=RwQmMbw7fyzmEPAG


// go to spring initiallizer - start.spring.io to create the spring app
1) give dependency - spring web(for restfull apis)


// FOLDER STRUCTURE ---
-- Controllers, Services, Entity(where db models are created)

// dependencies -- 
1) maven central 
spring-boot-starter-web(then copy paste)[do this] -- and best practice remove the version tag
2) or pom.xml -> go to dependencies tag then right click->generater->dependency

//some notes --
spring mvc (mvc - model, view, controller)
model - data+logic
view - what the user sees(html css js is rendered)
controller - mediator

// opening a java spring boot file --
1) in the right hand side bar there is mavan - click on it
2) go to mavan store
3) go to lifecycle file
4) right click on clean and run mavan build
5) right click on packagae and run mavan build
6) right click on install and run mavan build


// run java spring boot -- go the root foler - then -- if runing from terminal
mvn spring-boot:run

// if want to run from the run button(recomanded)
1) open the project
2) go to the main file(generally under src/main/java/com.neel.store(main folder that gets created)
3) the file under it (in the above case) StoreApplication.java[then there will be run option]

//IF WANT TO RUN FROM ANY FILE ---
1) go the the side drop down (left side of run)
2) edit configuration
3) create a new and name it(here named as store)
4) build and run - java 24(latest) and side select the StoreApplication.java(inside - src/main/java/com.neel.store)
5) apply then ok done!


//if port is already is in use --- then in cmd
netstat -ano | findstr :8080
// 12345 - replace it wiht listening address(get it from above code)
taskkill /PID 12345 /F


// HOW TO REFACTOR A CODE--
1)select a code
2)go to up bar then Refactor
3) then Extract/introduce then interface
4) name it below there is select it then refactor - done!


// some shortcuts ---
shift+shift (o go anywhere in the file search everywhere)
ctrl+. (to bring up context menu in videos alt+enter)
ctrl+, (to bring up settings)
alt+insert (to bring up generate context menu)


// some imp dependecy -
1) spring web when making the project
2) spring-boot-starter-validation(like zod in node - form validation)
3) jakarta.persistence-api
4) spring-boot-starter-data-jpa

5) jjwt-api(5,6,7 for jsonwebtoken - don't remove the version from any of their dependency or won't work)
6) jjwt-impl
7) jjwt-jackson 

8) spring-boot-starter-security(for security)

9) mysql-connector-j(for mysql)

10)spring-boot-starter-web (used in rest controller -- get/post/put etc)

(*) so must needed dependency - are:
spring-boot-starter-web(for restapis) -- add when creating folder in spring starter
spring-boot-starter-data-jpa(for interacting with the database - generally sql based)
spring-boot-starter-validation(for form validation like zod)
jjwt-api,jjwt-impl,jjwt-jackson(for json webtoken - don't remove the versions)
spring-boot-starter-security(for security, authentication eg dashboard page where one needs to get authnticated)
mysql-connector-j(for connection with mysql)


*/


// NEW START HERE ------
go to spring initiallizer -
https://start.spring.io/

to get dependencies --
maven central --
https://central.sonatype.com/

make the file and done

some of the file structures -- 
1) controllers(write @RestController at the top) - where we write the api call - post/get/put/delete etc - get /login, /signup etc
@Autowired the service(not the service implementation)

2) models - where we write the model that goes into the db(basically what are saving) - 
eg if Signup model then - what we want to save in the backend - eg name, email, password

3) dto(data transfer object) - the schema that we want to call before saving. Like in js we can use zod to make 
the schema, and then work on that. similarly, eg in signup we would like to have name, email, password, confirm password,
and n number of different fields to verify but we don't want to save all the things in the dataBase(like confirm pass)
so we call dto and then save what we want in the model.

4) services(write @Service at the top) - where the actual work takes place. the controller calls the service to work

5) filter(write @Component at the top) - mostly used for logs and filtering data when passed from the request

6) repository(directly talks to the db - use interface and extends to JpaRepository - spring-boot-starter-data-jpa)

7) configuration(generally allowed path - eg cors, write @Configuration also after class @Bean) -- see week6.2 for example just add the global file

IMPORTANT STUFF --
1) class(Provides the actual logic for those methods.) vs interface(Only defines what should be done (method signatures).)
generally inside the service we create 2 files one is service(eg serviceOne) and second is implementation(eg serviceOneImp)
first one interface and 2nd one is class and put @Service on top. And in the controller put @Autowired then call the serviceOne

2) similar to zod there is bean validation to check validation (spring-boot-starter-validation) of the input - put in your dto folder 

3) for jwt(json web token) there are 3 dependencies -- jjwt-api, jjwt-impl, and jjwt-jackson, also use this (<scope>runtime</scope>) 
in jjwt-impl and jjwt-jackson paste below to make it work in the runtime (see maven central and don't remove the version or will throw error)

4) here jwt take 32byte secret key or it will throw error - so how to generate -
node -e "console.log(require('crypto').randomBytes(32).toString('hex'))